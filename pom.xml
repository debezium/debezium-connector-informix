<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <parent>
        <groupId>io.debezium</groupId>
        <artifactId>debezium-parent</artifactId>
        <version>2.6.0-SNAPSHOT</version>
    </parent>

    <modelVersion>4.0.0</modelVersion>
    <artifactId>debezium-connector-informix</artifactId>
    <version>2.6.0-SNAPSHOT</version>
    <name>Debezium Connector for Informix Server</name>
    <packaging>jar</packaging>

    <scm>
        <connection>scm:git:git@github.com:debezium/debezium-connector-informix.git</connection>
        <developerConnection>scm:git:git@github.com:debezium/debezium-connector-informix.git</developerConnection>
        <url>https://github.com/debezium/debezium-connector-informix</url>
        <tag>HEAD</tag>
    </scm>

    <properties>
        <!-- Debezium parent -->
        <version.debezium>${project.version}</version.debezium>

        <!--
          Specify the properties that will be used for setting up the integration tests' Docker container.
          Note that the `dockerhost.ip` property is computed from the IP address of DOCKER_HOST, which will
          work on all platforms. We'll set some of these as system properties during integration testing.
        -->
        <informix.user>informix</informix.user>
        <informix.password>in4mix</informix.password>
        <informix.db.name>testdb</informix.db.name>
        <informix.image>informix-developer-database</informix.image>
        <informix.image.registry>icr.io/informix</informix.image.registry>
        <informix.image.tag>14.10.FC9W1DE</informix.image.tag>
        <informix.version>14</informix.version>
        <docker.dbs>debezium/informix-test-database</docker.dbs>
        <docker.filter>${docker.dbs}:${informix.version}</docker.filter>
        <docker.skip>false</docker.skip>
        <docker.showLogs>true</docker.showLogs>

        <!-- Apicurio container properties -->
        <apicurio.port>8080</apicurio.port>
        <apicurio.init.timeout>60000</apicurio.init.timeout> <!-- 60 seconds -->
    </properties>

    <repositories>
        <repository>
            <id>oss</id>
            <name>OSS Sonatype Nexus</name>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
            <releases>
                <enabled>true</enabled>
                <updatePolicy>never</updatePolicy>
            </releases>
            <snapshots>
                <enabled>true</enabled>
                <updatePolicy>never</updatePolicy>
            </snapshots>
        </repository>
    </repositories>

    <!-- Managing versions here to ensure the right ones are applied during releases -->
    <dependencyManagement>
        <dependencies>
            <!-- Debezium artifacts -->
            <dependency>
                <groupId>io.debezium</groupId>
                <artifactId>debezium-core</artifactId>
                <version>${version.debezium}</version>
            </dependency>
            <dependency>
                <groupId>io.debezium</groupId>
                <artifactId>debezium-embedded</artifactId>
                <version>${version.debezium}</version>
            </dependency>
            <dependency>
                <groupId>io.debezium</groupId>
                <artifactId>debezium-storage-kafka</artifactId>
                <version>${version.debezium}</version>
            </dependency>
            <dependency>
                <groupId>io.debezium</groupId>
                <artifactId>debezium-storage-file</artifactId>
                <version>${version.debezium}</version>
            </dependency>

            <!-- Building -->
            <dependency>
                <groupId>io.debezium</groupId>
                <artifactId>debezium-ide-configs</artifactId>
                <version>${version.debezium}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>io.debezium</groupId>
                <artifactId>debezium-checkstyle</artifactId>
                <version>${version.debezium}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>io.debezium</groupId>
                <artifactId>debezium-assembly-descriptors</artifactId>
                <version>${version.debezium}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>io.debezium</groupId>
                <artifactId>debezium-revapi</artifactId>
                <version>${version.debezium}</version>
                <scope>provided</scope>
            </dependency>

            <!-- Testing -->
            <dependency>
                <groupId>io.debezium</groupId>
                <artifactId>debezium-core</artifactId>
                <version>${version.debezium}</version>
                <type>test-jar</type>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>io.debezium</groupId>
                <artifactId>debezium-embedded</artifactId>
                <version>${version.debezium}</version>
                <type>test-jar</type>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>io.debezium</groupId>
            <artifactId>debezium-core</artifactId>
        </dependency>
        <dependency>
            <groupId>io.debezium</groupId>
            <artifactId>debezium-storage-kafka</artifactId>
        </dependency>
        <dependency>
            <groupId>io.debezium</groupId>
            <artifactId>debezium-storage-file</artifactId>
        </dependency>
        <!-- Informix ChangeStream client -->
        <dependency>
            <groupId>com.ibm.informix</groupId>
            <artifactId>ifx-changestream-client</artifactId>
            <scope>provided</scope>
        </dependency>
        <!-- Informix JDBC driver -->
        <dependency>
            <groupId>com.ibm.informix</groupId>
            <artifactId>jdbc</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>connect-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Building -->
        <dependency>
            <groupId>io.debezium</groupId>
            <artifactId>debezium-ide-configs</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>io.debezium</groupId>
            <artifactId>debezium-checkstyle</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>io.debezium</groupId>
            <artifactId>debezium-assembly-descriptors</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>io.debezium</groupId>
            <artifactId>debezium-revapi</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Testing -->
        <dependency>
            <groupId>io.debezium</groupId>
            <artifactId>debezium-embedded</artifactId>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.debezium</groupId>
            <artifactId>debezium-core</artifactId>
            <type>test-jar</type>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.debezium</groupId>
            <artifactId>debezium-embedded</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.awaitility</groupId>
            <artifactId>awaitility</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Required by VerifyRecord -->
        <dependency>
            <groupId>io.confluent</groupId>
            <artifactId>kafka-connect-avro-converter</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.apicurio</groupId>
            <artifactId>apicurio-registry-utils-converter</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <artifactId>slf4j-jboss-logmanager</artifactId>
                    <groupId>org.jboss.slf4j</groupId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <configuration>
                    <watchInterval>500</watchInterval>
                    <logDate>default</logDate>
                    <verbose>true</verbose>
                    <imagePullPolicy>IfNotPresent</imagePullPolicy>
                    <containerNamePattern>%e</containerNamePattern>
                    <images>
                        <!-- Images based on "${informix.image}" Docker image -->
                        <image>
                            <name>${docker.dbs}:${informix.version}</name>
                            <run>
                                <env>
                                    <SIZE>small</SIZE>
                                    <LICENSE>accept</LICENSE>
                                    <USEOSTIME>1</USEOSTIME>
                                </env>
                                <ports>
                                    <port>${informix.port}:9088</port>
                                </ports>
                                <log>
                                    <prefix>IFX &gt;&gt;&gt;</prefix>
                                    <enabled>true</enabled>
                                    <color>yellow</color>
                                </log>
                                <wait>
                                    <time>600000</time> <!-- 600 seconds max -->
                                    <log>SCHAPI: Started \d+ dbWorker threads</log>
                                </wait>
                            </run>
                            <build>
                                <from>${informix.image.registry}/${informix.image}:${informix.image.tag}</from>
                                <runCmds>
                                    <run>sed -Ei 's/^(USEOSTIME)\s+\S/\1 1/' /opt/ibm/informix/etc/onconfig.std</run>
                                </runCmds>
                            </build>
                            <external>
                                <type>properties</type>
                                <mode>override</mode>
                            </external>
                        </image>
                        <image>
                            <name>apicurio/apicurio-registry-mem:${version.apicurio}</name>
                            <run>
                                <namingStrategy>none</namingStrategy>
                                <ports>
                                    <port>${apicurio.port}:8080</port>
                                </ports>
                                <log>
                                    <prefix>apicurio</prefix>
                                    <enabled>true</enabled>
                                    <color>blue</color>
                                </log>
                                <wait>
                                    <log>.*apicurio-registry-app.*started in.*</log>
                                    <time>${apicurio.init.timeout}</time>
                                </wait>
                            </run>
                        </image>
                    </images>
                </configuration>
                <!--
                Connect this plugin to the maven lifecycle around the integration-test phase:
                start the container in pre-integration-test and stop it in post-integration-test.
                -->
                <executions>
                    <execution>
                        <id>start</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>build</goal>
                            <goal>start</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>stop</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!--
            Unlike surefire, the failsafe plugin ensures 'post-integration-test' phase always runs, even
            when there are failed integration tests. We rely upon this to always shut down the Docker container
            after the integration tests (defined as '*IT.java') are run.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <executions>
                    <execution>
                        <id>integration-test</id>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>verify</id>
                        <goals>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <skipTests>${skipITs}</skipTests>
                    <enableAssertions>true</enableAssertions>
                    <systemPropertyVariables>
                        <!-- Make these available to the tests via system properties -->
                        <database.hostname>${docker.host.address}</database.hostname>
                        <database.dbname>${informix.db.name}</database.dbname>
                        <database.port>${informix.port}</database.port>
                        <database.user>${informix.user}</database.user>
                        <database.password>${informix.password}</database.password>
                        <skipLongRunningTests>${skipLongRunningTests}</skipLongRunningTests>
                    </systemPropertyVariables>
                    <runOrder>${runOrder}</runOrder>
                </configuration>
            </plugin>
        </plugins>
        <resources>
            <!-- Apply the properties set in the POM to the resource files -->
            <resource>
                <filtering>true</filtering>
                <directory>src/main/resources</directory>
                <includes>
                    <include>*</include>
                    <include>**/*</include>
                </includes>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>*</include>
                    <include>**/*</include>
                </includes>
            </testResource>
        </testResources>
    </build>
    <!-- Define several useful profiles -->
    <profiles>
        <profile>
            <id>assembly</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-assembly-plugin</artifactId>
                        <dependencies>
                            <dependency>
                                <groupId>io.debezium</groupId>
                                <artifactId>debezium-assembly-descriptors</artifactId>
                                <version>${project.version}</version>
                            </dependency>
                        </dependencies>
                        <executions>
                            <execution>
                                <id>default</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>single</goal>
                                </goals>
                                <configuration>
                                    <finalName>${project.artifactId}-${project.version}</finalName>
                                    <attach>true</attach>  <!-- we want to attach & deploy these to Maven -->
                                    <descriptorRefs>
                                        <descriptorRef>${assembly.descriptor}</descriptorRef>
                                    </descriptorRefs>
                                    <tarLongFileMode>posix</tarLongFileMode>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <!--  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Do not perform any Docker-related functionality
              To use, specify "-DskipITs" on the Maven command line.
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <profile>
            <id>skip-integration-tests</id>
            <activation>
                <activeByDefault>false</activeByDefault>
                <property>
                    <name>skipITs</name>
                </property>
            </activation>
            <properties>
                <docker.skip>true</docker.skip>
            </properties>
        </profile>
        <profile>
            <id>quick</id>
            <activation>
                <activeByDefault>false</activeByDefault>
                <property>
                    <name>quick</name>
                </property>
            </activation>
            <properties>
                <skipITs>true</skipITs>
                <docker.skip>true</docker.skip>
            </properties>
        </profile>
        <profile>
            <id>informix12</id>
            <activation>
                <activeByDefault>false</activeByDefault>
                <property>
                    <name>informix12</name>
                </property>
            </activation>
            <properties>
                <informix.version>12</informix.version>
                <informix.image.registry>docker.io/ibmcom</informix.image.registry>
                <informix.image.tag>12.10.FC12W1DE</informix.image.tag>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <configuration>
                            <images>
                                <image>
                                    <build>
                                        <assembly>
                                            <inline>
                                                <includeBaseDirectory>false</includeBaseDirectory>
                                                <files>
                                                    <file>
                                                        <source>${project.basedir}/src/test/docker/informix-cdc-docker/12/informix_init.sh</source>
                                                        <outputDirectory>scripts</outputDirectory>
                                                    </file>
                                                </files>
                                            </inline>
                                            <targetDir>/opt/ibm</targetDir>
                                            <user>informix:informix</user>
                                            <mode>tar</mode>
                                        </assembly>
                                    </build>
                                </image>
                            </images>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>informix14</id>
            <activation>
                <activeByDefault>true</activeByDefault>
                <property>
                    <name>informix14</name>
                </property>
            </activation>
            <properties>
                <informix.version>14</informix.version>
                <informix.image.registry>icr.io/informix</informix.image.registry>
                <informix.image.tag>14.10.FC9W1DE</informix.image.tag>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <configuration>
                            <images>
                                <image>
                                    <run>
                                        <env>
                                            <RUN_FILE_POST_INIT>informix_post_init.sh</RUN_FILE_POST_INIT>
                                        </env>
                                    </run>
                                    <build>
                                        <assembly>
                                            <inline>
                                                <includeBaseDirectory>false</includeBaseDirectory>
                                                <files>
                                                    <file>
                                                        <source>${project.basedir}/src/test/docker/informix-cdc-docker/14/informix_post_init.sh</source>
                                                        <outputDirectory>config</outputDirectory>
                                                    </file>
                                                    <file>
                                                        <source>${project.basedir}/src/test/docker/informix-cdc-docker/14/testdb.sql</source>
                                                        <outputDirectory>informix/etc</outputDirectory>
                                                    </file>
                                                </files>
                                            </inline>
                                            <targetDir>/opt/ibm</targetDir>
                                            <user>informix:informix</user>
                                            <mode>tar</mode>
                                        </assembly>
                                    </build>
                                </image>
                            </images>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>apicurio</id>
            <activation>
                <activeByDefault>false</activeByDefault>
                <property>
                    <name>apicurio</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <configuration>
                            <systemPropertyVariables>
                                <use.apicurio>true</use.apicurio>
                            </systemPropertyVariables>
                            <runOrder>${runOrder}</runOrder>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
            <properties>
                <docker.filter>${docker.dbs}:${informix.version},apicurio/apicurio-registry-mem:${version.apicurio}</docker.filter>
            </properties>
        </profile>
    </profiles>
</project>
